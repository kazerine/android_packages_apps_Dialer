/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.android.dialer.logging.nano;

/** This file is autogenerated, but javadoc required. */
@SuppressWarnings("hiding")
public final class ContactSource
    extends com.google.protobuf.nano.ExtendableMessageNano<ContactSource> {

  /** This file is autogenerated, but javadoc required. */
  // enum Type
  public interface Type {
    public static final int UNKNOWN_SOURCE_TYPE = 0;
    public static final int SOURCE_TYPE_DIRECTORY = 1;
    public static final int SOURCE_TYPE_EXTENDED = 2;
    public static final int SOURCE_TYPE_PLACES = 3;
    public static final int SOURCE_TYPE_PROFILE = 4;
    public static final int SOURCE_TYPE_CNAP = 5;
  }

  private static volatile ContactSource[] _emptyArray;

  public static ContactSource[] emptyArray() {
    // Lazily initializes the empty array
    if (_emptyArray == null) {
      synchronized (com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
        if (_emptyArray == null) {
          _emptyArray = new ContactSource[0];
        }
      }
    }
    return _emptyArray;
  }

  // @@protoc_insertion_point(class_scope:com.android.dialer.logging.ContactSource)

  public ContactSource() {
    clear();
  }

  public ContactSource clear() {
    unknownFieldData = null;
    cachedSize = -1;
    return this;
  }

  @Override
  public ContactSource mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano input)
      throws java.io.IOException {
    while (true) {
      int tag = input.readTag();
      switch (tag) {
        case 0:
          return this;
        default:
          {
            if (!super.storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
      }
    }
  }

  public static ContactSource parseFrom(byte[] data)
      throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
    return com.google.protobuf.nano.MessageNano.mergeFrom(new ContactSource(), data);
  }

  public static ContactSource parseFrom(com.google.protobuf.nano.CodedInputByteBufferNano input)
      throws java.io.IOException {
    return new ContactSource().mergeFrom(input);
  }
}
