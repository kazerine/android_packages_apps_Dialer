/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.android.dialer.logging.nano;

/** This file is autogenerated, but javadoc required. */
@SuppressWarnings("hiding")
public final class ScreenEvent extends com.google.protobuf.nano.ExtendableMessageNano<ScreenEvent> {

  // enum Type
  /** This file is autogenerated, but javadoc required. */
  public interface Type {
    public static final int UNKNOWN = 0;
    public static final int DIALPAD = 1;
    public static final int SPEED_DIAL = 2;
    public static final int CALL_LOG = 3;
    public static final int VOICEMAIL_LOG = 4;
    public static final int ALL_CONTACTS = 5;
    public static final int REGULAR_SEARCH = 6;
    public static final int SMART_DIAL_SEARCH = 7;
    public static final int CALL_LOG_FILTER = 8;
    public static final int SETTINGS = 9;
    public static final int IMPORT_EXPORT_CONTACTS = 10;
    public static final int CLEAR_FREQUENTS = 11;
    public static final int SEND_FEEDBACK = 12;
    public static final int INCALL = 13;
    public static final int INCOMING_CALL = 14;
    public static final int CONFERENCE_MANAGEMENT = 15;
    public static final int INCALL_DIALPAD = 16;
    public static final int CALL_LOG_CONTEXT_MENU = 17;
    public static final int BLOCKED_NUMBER_MANAGEMENT = 18;
    public static final int BLOCKED_NUMBER_ADD_NUMBER = 19;
    public static final int CALL_DETAILS = 20;
  }

  private static volatile ScreenEvent[] _emptyArray;
  public static ScreenEvent[] emptyArray() {
    // Lazily initializes the empty array
    if (_emptyArray == null) {
      synchronized (com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
        if (_emptyArray == null) {
          _emptyArray = new ScreenEvent[0];
        }
      }
    }
    return _emptyArray;
  }

  // @@protoc_insertion_point(class_scope:com.android.dialer.logging.ScreenEvent)

  public ScreenEvent() {
    clear();
  }

  public ScreenEvent clear() {
    unknownFieldData = null;
    cachedSize = -1;
    return this;
  }

  @Override
  public ScreenEvent mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano input)
      throws java.io.IOException {
    while (true) {
      int tag = input.readTag();
      switch (tag) {
        case 0:
          return this;
        default:
          {
            if (!super.storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
      }
    }
  }

  public static ScreenEvent parseFrom(byte[] data)
      throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
    return com.google.protobuf.nano.MessageNano.mergeFrom(new ScreenEvent(), data);
  }

  public static ScreenEvent parseFrom(com.google.protobuf.nano.CodedInputByteBufferNano input)
      throws java.io.IOException {
    return new ScreenEvent().mergeFrom(input);
  }
}
